// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum School {
  CFA
  CIT
  MCS
  SCS
  DIETRICH
  TEPPER
}

enum Dorm {
  BOSS
  CLYDE
  DONNER
  E_TOWER
  FAIRFAX
  FIFTH_AND_CLYDE
  FIFTH_NEVILLE_APTS
  FORBES_BEELER
  HAMMERSCHLAG
  HENDERSON
  HIGHLANDS
  MARGARET_MORRISON
  MCGILL
  MOREWOOD_GARDENS
  MUDGE
  NEVILLE_APTS
  RESNIK
  RES_ON_FIFTH
  ROSELAWN
  SCOBELL
  STEVER
  WELCH
  WEST_WING
}

enum Volume {
  SILENT
  PEACEFUL
  LOUD
}

enum ShowerTime {
  MORNING
  MIDDAY
  NIGHT
  NONE
}

enum Status {
  AVAILABLE
  MAYBE
  NOT_AVAILABLE
}

enum Sex {
  MALE
  FEMALE
  DNA
}

enum Bathroom {
  COMMUNAL
  SEMI_PRIVATE
}

enum Media {
  DISCORD
  INSTAGRAM
  FACEBOOK
  TWITTER
  SNAPCHAT
}

model Account {
  id                  String       @id @unique // from clerk
  profile             Profile?
  membership          Membership?
  connections         Connection[]
  outgoingInvitations Invitation[] @relation("outgoingInvitations")
  incomingInvitations Invitation[] @relation("incomingInvitations")
}

model Profile {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique

  // General Info
  year      Int
  committed Boolean
  status    Status

  // School Preferences
  school School

  // Identity
  assigned_sex       Sex
  sexual_orientation String
  pronouns           String

  // Personal Info
  location        String
  health_concerns String

  // Roommate Preferences
  roommate_preferred_gender  String
  roommate_preferred_schools School[]

  // Dorm topics
  preferred_dorm      Dorm[]
  bathroom_preference Bathroom[]
  quiet_dorm          Boolean

  // Daytime
  wake          String
  time_to_ready Int
  day_volume    Volume

  // Nighttime
  sleep        String
  sleep_needs  String
  night_volume Volume
  snore        Boolean

  // Habitual Info
  shower_time         ShowerTime
  study_preferences   String
  neatness            Int
  social_energy_level Int

  // Fun Life
  alcohol Boolean
  drugs   Boolean
  parties String

  // Artistic Views
  music     String
  hobbies   String
  aesthetic String

  // Supplementary Info
  political_spectrum String
  religion           String
  personality_test   String

  // Wrapping Things Up
  fun_fact String
  notes    String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Connection {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  provider  Media
  handle    String
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Invitation {
  id         String           @id @default(cuid())
  sender     Account          @relation("outgoingInvitations", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   Account          @relation("incomingInvitations", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  message    String
  status     InvitationStatus
  group      Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    String
}

model Group {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  members     Membership[] @relation
  invitations Invitation[]
}

enum Role {
  ADMIN
  MEMBER
}

model Membership {
  id        String  @id @default(cuid())
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique
  role      Role
}
